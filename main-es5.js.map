{"version":3,"sources":["webpack:///src/app/employee/employee.component.ts","webpack:///src/app/employee/employee.component.html","webpack:///src/environments/environment.ts","webpack:///src/app/company/dashboard/dashboard.component.ts","webpack:///src/app/company/dashboard/dashboard.component.html","webpack:///src/app/employee/add-employee/add-employee.component.ts","webpack:///src/app/employee/add-employee/add-employee.component.html","webpack:///src/app/company/company.component.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/$_lazy_route_resource lazy namespace object","webpack:///src/app/header/header.component.ts","webpack:///src/app/header/header.component.html","webpack:///src/app/shared.service.ts","webpack:///src/app/register-company/register-company.component.ts","webpack:///src/app/register-company/register-company.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/employee/employee-list/employee-list.component.ts","webpack:///src/app/employee/employee-list/employee-list.component.html","webpack:///src/main.ts"],"names":["EmployeeComponent","selector","templateUrl","styleUrls","environment","production","DashboardComponent","route","router","sharedServ","companyDetails","JSON","parse","localStorage","getItem","verifyCompany","subscribe","res","console","log","err","navigate","id","relativeTo","onAddEmployee","onEmployeeList","AddEmployeeComponent","popupMsg","regForm","value","registerEmployee","success","setTimeout","reset","CompanyComponent","AppComponent","title","AppModule","declarations","imports","providers","bootstrap","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","HeaderComponent","removeItem","onLogout","SharedService","http","companyLoginurl","registerEmployeeUrl","registerCompanyUrl","verifyCompanyUrl","data","post","employeeListUrl","get","observe","token","headers","set","providedIn","RegisterCompanyComponent","registerCompany","message","onCompanyRegister","routes","path","component","children","AppRoutingModule","forRoot","relativeLinkResolution","LoginComponent","companyLogin","setItem","stringify","onLogin","EmployeeListComponent","shareServ","employeeList","employees","bootstrapModule","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-employee',\n  templateUrl: './employee.component.html',\n  styleUrls: ['./employee.component.css']\n})\nexport class EmployeeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<router-outlet></router-outlet>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { SharedService } from 'src/app/shared.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n  companyDetails: any;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private sharedServ: SharedService) { }\n\n  ngOnInit(): void {\n     this.companyDetails = JSON.parse(localStorage.getItem('company'));\n    \n     this.sharedServ.verifyCompany()\n     .subscribe(\n       res => console.log(res),\n       err => \n       {\n        this.router.navigate([''])\n         console.log(err)}\n     )\n    \n  }\n\n\n  onEmployeeList() {\n  \n      this.router.navigate(['/dashboard', this.companyDetails.id], {relativeTo: this.route})\n    \n  }\n\n  onAddEmployee() {\n  \n      this.router.navigate(['/dashboard'])\n   \n  }\n}\n","<div>\n    <app-header></app-header>\n</div>\n\n<div class=\"container\" style=\"margin-top: 30px\">\n    <button \n    type=\"button\" \n    class=\"btn btn-primary\"\n    (click)=\"onAddEmployee()\">Add Employee</button>\n    <button \n    type=\"button\" \n    class=\"btn btn-secondary\"\n    (click)=\"onEmployeeList()\">Employee List</button>\n\n    \n     <router-outlet></router-outlet>\n    \n</div>","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { SharedService } from 'src/app/shared.service';\n\n@Component({\n  selector: 'app-add-employee',\n  templateUrl: './add-employee.component.html',\n  styleUrls: ['./add-employee.component.css']\n})\nexport class AddEmployeeComponent implements OnInit {\n\ncompanyDetails: any;\npopupMsg: boolean = false;\n\n  constructor(private sharedServ: SharedService) { }\n\n  ngOnInit(): void {\n\n    this.companyDetails = JSON.parse(localStorage.getItem('company'));\n    \n  }\n\n  onAddEmployee(regForm: NgForm) {\n    regForm.value[\"companyId\"] = this.companyDetails.id;\n    // console.log({...regForm.value,companyid: this.companyDetails.id})\n    this.sharedServ.registerEmployee(regForm.value).subscribe(\n      res => \n      {\n        if(res.success == 1) {\n              this.popupMsg = true;\n              setTimeout( () => \n              {\n                this.popupMsg = false\n              },2000)\n              regForm.reset();  \n\n        }\n\n      },\n      err => console.log(err)\n    )\n  }\n\n}\n","<form #regForm='ngForm' (ngSubmit)=\"onAddEmployee(regForm)\" style=\"margin-top: 30px\">\n    <div class=\"form-group\">\n      <label for=\"exampleInputEmail1\">Name</label>\n      <input \n      type=\"text\" \n      class=\"form-control\" \n      id=\"exampleInputEmail1\" \n      placeholder=\"Enter Name\"\n      name=\"name\"\n      ngModel\n      required\n      #name=\"ngModel\">\n      <div *ngIf=\"name.touched\" style=\"color: red\">\n        <span\n        style=\"color: red\" \n        *ngIf=\"name.errors?.required\">Please enter the Name</span>\n    </div>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"exampleInputPassword1\">Age</label>\n      <input \n      type=\"text\" \n      class=\"form-control\" \n      id=\"exampleInputPassword1\" \n      placeholder=\"Enter Age\"\n      name=\"age\"\n      ngModel\n      required\n      pattern=\"^(?:1[01][0-9]|120|1[7-9]|[2-9][0-9])$\"\n      #age=\"ngModel\">\n      <div *ngIf=\"age.touched\" style=\"color: red\">\n        <span\n        style=\"color: red\" \n        *ngIf=\"age.errors?.required\">Please enter the Age</span>\n        <span\n        style=\"color: red\" \n        *ngIf=\"age.errors?.pattern\">Please enter the age between 17 to 120</span>\n    </div>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"exampleInputPassword1\">Salary</label>\n        <input \n        type=\"text\" \n        class=\"form-control\" \n        id=\"exampleInputPassword1\" \n        placeholder=\"Enter Salary\"\n        name=\"salary\"\n        ngModel\n        required\n        pattern=\"^[0-9]*$\"\n        #salary=\"ngModel\">\n        <div *ngIf=\"salary.touched\" style=\"color: red\">\n          <span\n          style=\"color: red\" \n          *ngIf=\"salary.errors?.required\">Please enter the salary</span>\n          <span\n          style=\"color: red\" \n          *ngIf=\"salary.errors?.pattern\">Please enter number only</span>\n      </div>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"exampleInputPassword1\">Phone Number</label>\n        <input \n        type=\"text\" \n        class=\"form-control\" \n        id=\"exampleInputPassword1\" \n        placeholder=\"Enter Phone Number\"\n        name=\"phonenumber\"\n        ngModel\n        pattern=\"^[2-9]{2}[0-9]{8}$\"\n        required\n        #phonenumber=\"ngModel\">\n        <div *ngIf=\"phonenumber.touched\" style=\"color: red\">\n          <span\n          style=\"color: red\" \n          *ngIf=\"phonenumber.errors?.required\">Please enter the phonenumber</span>\n          <span\n          style=\"color: red\" \n          *ngIf=\"phonenumber.errors?.pattern\">Please enter the correct phonenumber</span>\n      </div>\n      </div>\n    <button \n    type=\"submit\" \n    class=\"btn btn-primary\"\n    [disabled]=\"!regForm.valid\">Submit</button>\n  </form>\n  <div\n  *ngIf = \"popupMsg\" \n  class=\"pop-up\">\n    <h5 style=\"color:white\">Employee sucessfully created.</h5>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-company',\n  templateUrl: './company.component.html',\n  styleUrls: ['./company.component.css']\n})\nexport class CompanyComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'evapp';\n}\n","<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\nimport { CompanyComponent } from './company/company.component';\nimport { DashboardComponent } from './company/dashboard/dashboard.component';\nimport { HeaderComponent } from './header/header.component';\nimport { EmployeeComponent } from './employee/employee.component';\nimport { EmployeeListComponent } from './employee/employee-list/employee-list.component';\nimport { AddEmployeeComponent } from './employee/add-employee/add-employee.component';\nimport { RegisterCompanyComponent } from './register-company/register-company.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    CompanyComponent,\n    DashboardComponent,\n    HeaderComponent,\n    EmployeeComponent,\n    EmployeeListComponent,\n    AddEmployeeComponent,\n    RegisterCompanyComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"crnd\";","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  companyDetails: any;\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n    this.companyDetails = JSON.parse(localStorage.getItem('company'));\n  }\n\n  onLogout() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('company')\n\n      this.router.navigate([''])\n  }\n\n}\n","<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n    <a class=\"navbar-brand\">{{companyDetails.name}}</a>\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n  \n    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <form class=\"form-inline my-2 my-lg-0\" style=\"position: absolute; right: 20px\">\n        <button \n        class=\"btn btn-outline-success my-2 my-sm-0\" \n        type=\"button\"\n        (click)=\"onLogout()\">Logout</button>\n      </form>\n    </div>\n  </nav>","\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n@Injectable({\n  providedIn: 'root'\n})\nexport class SharedService {\n  private companyLoginurl = \"http://localhost:3000/companyApi/companyLogin\";\n  private registerEmployeeUrl = \"http://localhost:3000/employeeApi/registerEmployee\"\n  private registerCompanyUrl = \"http://localhost:3000/companyApi/registerCompany\";\n  private verifyCompanyUrl = \"http://localhost:3000/companyApi/verifyToken\";\n\n  constructor(private http: HttpClient) { }\n  \n  companyLogin(data: {\n    email: string;\n    password: string;\n  }) {\n    return this.http.post<any>(this.companyLoginurl, data);\n  }\n\n  employeeList(id: number) {\n    const employeeListUrl = \"http://localhost:3000/employeeApi/employeeList/\" + id;\n    return this.http.get<any>(employeeListUrl, {\n      observe: 'body'\n    })\n  }\n\n  registerEmployee(data: any) {\n    return this.http.post<any>(this.registerEmployeeUrl, data);\n  }\n\n  registerCompany(data: any) {\n    return this.http.post<any>(this.registerCompanyUrl, data);\n  }\n\n  verifyCompany() {\n    const token = localStorage.getItem(\"token\");\n\n    return this.http.get<any>(this.verifyCompanyUrl, {\n      observe: \"body\",\n      headers: new HttpHeaders().set(\"Authorization\", \"Bearer \" + token)\n    })\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { SharedService } from '../shared.service';\n\n@Component({\n  selector: 'app-register-company',\n  templateUrl: './register-company.component.html',\n  styleUrls: ['./register-company.component.css']\n})\nexport class RegisterCompanyComponent implements OnInit {\n\n  message: string\n\n  constructor(private router: Router, private sharedServ: SharedService) { }\n\n  ngOnInit(): void {\n  }\n\n  onCompanyRegister(regForm: NgForm) {\n    this.sharedServ.registerCompany(regForm.value)\n    .subscribe(\n      res => {\n        if(res.success == 0) {\n          this.message = \"Registration is not completed\"\n        } else {\n          console.log(res)\n          this.router.navigate([''])\n        }\n      },\n      err => console.log(err)\n    )\n  }\n\n}\n","<div class=\"global-container\">\n\t<div class=\"card login-form\">\n\t<div class=\"card-body\">\n\t\t<h3 class=\"card-title text-center\">Company Registration Form</h3>\n\t\t<div class=\"card-text\">\n\t\t\t<!--\n\t\t\t<div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">Incorrect username or password.</div> -->\n\t\t\t<form #regForm='ngForm' (ngSubmit)=\"onCompanyRegister(regForm)\">\n\t\t\t\t<!-- to error: add class \"has-danger\" -->\n\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t<label for=\"exampleInputEmail1\">Name</label>\n                    <input \n                    type=\"text\" \n                    class=\"form-control form-control-sm\" \n                    id=\"exampleInputEmail1\" \n                    aria-describedby=\"emailHelp\"\n                    name=\"name\"\n                    ngModel\n                    required\n                    #name=\"ngModel\">\n                    <div *ngIf=\"name.touched\" style=\"color: red\">\n                        <span\n                        style=\"color: red\" \n                        *ngIf=\"name.errors?.required\">Please enter the name</span>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n\t\t\t\t\t<label for=\"exampleInputEmail1\">Email</label>\n                    <input \n                    type=\"email\" \n                    class=\"form-control form-control-sm\" \n                    id=\"exampleInputEmail1\" \n                    aria-describedby=\"emailHelp\"\n                    name=\"email\"\n                    ngModel\n                    required\n                    email\n                    #email=\"ngModel\">\n                    <div *ngIf=\"email.touched\" style=\"color: red\">\n                        <span\n                        style=\"color: red\" \n                        *ngIf=\"email.errors?.required\">Please enter the email</span>\n                        <span\n                        style=\"color: red\" \n                        *ngIf=\"email.errors?.email\">Please enter the correct email</span>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n\t\t\t\t\t<label for=\"exampleInputEmail1\">Phone</label>\n                    <input \n                    type=\"text\" \n                    class=\"form-control form-control-sm\" \n                    id=\"exampleInputEmail1\" \n                    aria-describedby=\"emailHelp\"\n                    name=\"phone\"\n                    ngModel\n                    required\n                    pattern=\"^[2-9]{2}[0-9]{8}$\"\n                    #phone=\"ngModel\">\n                    <div *ngIf=\"phone.touched\" style=\"color: red\">\n                        <span\n                        style=\"color: red\" \n                        *ngIf=\"phone.errors?.required\">Please enter the phonenumber</span>\n                        <span\n                        style=\"color: red\" \n                        *ngIf=\"phone.errors?.pattern\">Please enter the correct phonenumber</span>\n                    </div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t<label for=\"exampleInputPassword1\">Password</label>\n                    <input \n                    type=\"password\" \n                    class=\"form-control form-control-sm\" \n                    id=\"exampleInputPassword1\"\n                    name=\"password\"\n                    ngModel\n                    required\n                    #password=\"ngModel\">\n                    <div *ngIf=\"password.touched\" style=\"color: red\">\n                        <span\n                        style=\"color: red\" \n                        *ngIf=\"password.errors?.required\">Please enter the password</span>\n                    </div>\n                </div>\n                <div style=\"color: red; padding: 10px\">\n                    <!-- {{message}} -->\n                </div>\n                <button \n                type=\"submit\" \n                [disabled]=\"!regForm.valid\"\n                class=\"btn btn-primary btn-block\">Sign up</button>\n\t\t\t</form>\n\t\t</div>\n\t</div>\n</div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { CompanyComponent } from './company/company.component';\nimport { DashboardComponent } from './company/dashboard/dashboard.component';\nimport { EmployeeComponent } from './employee/employee.component';\nimport { EmployeeListComponent } from './employee/employee-list/employee-list.component';\nimport { AddEmployeeComponent } from './employee/add-employee/add-employee.component';\nimport { RegisterCompanyComponent } from './register-company/register-company.component';\n\nconst routes: Routes = [\n  {path: '', component: LoginComponent},\n  {path: 'dashboard', component: DashboardComponent, children: [\n    {path: '', component: AddEmployeeComponent},\n    {path: ':id', component: EmployeeListComponent}\n  ]},\n  {path: 'registration', component: RegisterCompanyComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\n// import { LoginService } from '../login.service';\nimport { SharedService } from '../shared.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n   message: String\n  constructor(\n    private router: Router,\n    private sharedServ: SharedService) { }\n\n  ngOnInit(): void {\n  }\n\n  onLogin(regForm: NgForm) {\n    console.log(regForm.value)\n    this.sharedServ.companyLogin(regForm.value)\n    .subscribe(\n      res => {\n        if(res.success == 0) {\n          this.message = \"Email or Password is incorrect, please try again.\"\n        } else {\n          console.log(res.message)\n          localStorage.setItem(\"token\", res.token);\n          localStorage.setItem(\"company\", JSON.stringify(res.message));\n          this.router.navigate([\"/dashboard\"])\n        }\n      },\n      err => console.log(err)\n    )\n    \n  }\n\n}\n","<div class=\"global-container\">\n\t<div class=\"card login-form\">\n\t<div class=\"card-body\">\n\t\t<h3 class=\"card-title text-center\">Company Login</h3>\n\t\t<div class=\"card-text\">\n\t\t\t<!--\n\t\t\t<div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">Incorrect username or password.</div> -->\n\t\t\t<form #regForm='ngForm' (ngSubmit)=\"onLogin(regForm)\">\n\t\t\t\t<!-- to error: add class \"has-danger\" -->\n\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t<label for=\"exampleInputEmail1\">Email address</label>\n                    <input \n                    type=\"email\" \n                    class=\"form-control form-control-sm\" \n                    id=\"exampleInputEmail1\" \n                    aria-describedby=\"emailHelp\"\n                    name=\"email\"\n                    ngModel\n                    required\n                    email\n                    #email=\"ngModel\">\n                    <div *ngIf=\"email.touched\" style=\"color: red\">\n                        <span\n                        style=\"color: red\" \n                        *ngIf=\"email.errors?.required\">Please enter the email</span>\n                        <span\n                        style=\"color: red\" \n                        *ngIf=\"email.errors?.email\">Please enter the correct email</span>\n                    </div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t<label for=\"exampleInputPassword1\">Password</label>\n                    <input \n                    type=\"password\" \n                    class=\"form-control form-control-sm\" \n                    id=\"exampleInputPassword1\"\n                    name=\"password\"\n                    ngModel\n                    required\n                    #password=\"ngModel\">\n\n                    <div style=\"color: red; padding: 10px\">\n                        {{message}}\n                    </div>\n\n                    <div *ngIf=\"password.touched\" style=\"color: red\">\n                        <span\n                        style=\"color: red\" \n                        *ngIf=\"password.errors?.required\">Please enter the password</span>\n                    </div>\n\t\t\t\t</div>\n                <button \n                type=\"submit\" \n                [disabled]=\"!regForm.valid\"\n                class=\"btn btn-primary btn-block\">Sign in</button>\n\t\t\t\t\n\t\t\t\t<div class=\"sign-up\">\n\t\t\t\t\tDon't have an account? <a routerLink=\"/registration\">Create One</a>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</div>\n\t</div>\n</div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { SharedService } from 'src/app/shared.service';\n\n@Component({\n  selector: 'app-employee-list',\n  templateUrl: './employee-list.component.html',\n  styleUrls: ['./employee-list.component.css']\n})\nexport class EmployeeListComponent implements OnInit {\n\n   employees:any[]\n   companyDetails: any\n\n  constructor(private shareServ: SharedService) { }\n\n  ngOnInit(): void {\n\n    this.companyDetails = JSON.parse(localStorage.getItem('company'));    \n\n\n    this.shareServ.employeeList(this.companyDetails.id).subscribe(\n      res =>\n       {\n        this.employees = res.message\n        console.log(this.employees)\n      },\n      err => console.log(err)\n    )\n  }\n\n}\n","<table class=\"table\" style=\"margin-top: 30px\">\n    <thead>\n      <tr>\n        <th scope=\"col\">id</th>\n        <th scope=\"col\">Name</th>\n        <th scope=\"col\">age</th>\n        <th scope=\"col\">phonenumber</th>\n        <th scope=\"col\">salary</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let employee of employees\">\n        <th scope=\"row\">{{employee.id}}</th>\n        <td>{{employee.name}}</td>\n        <td>{{employee.age}}</td>\n        <td>{{employee.phonenumber}}</td>\n        <td>{{employee.salary}}</td>\n      </tr>\n    </tbody>\n  </table>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}